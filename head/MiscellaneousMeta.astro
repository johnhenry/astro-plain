---
const {info, twitterMeta, ogMeta} = Astro.props;

const meta = {...info};
const genMetaTwitter = ({title, description, image}, card="summary_large_image",url=Astro.url.href  )=>{

  return {
    card,
    url,
    title,
    description,
    image: new URL(image, Astro.url).href
  }
};
const genMetaOG = ({title, description, image}, type="website", url=Astro.url.href )=>{
  return {
    type,
    url,
    title,
    description,
    image: new URL(image, url).href
  }
};

if(twitterMeta){
  meta.twitter = genMetaTwitter(info);
}

if(ogMeta){
  meta.og = genMetaOG(info);
}

const run = function * (object, prefix=[]){
  for (const [key, value] of Object.entries(object)) {
    if(key === "*") {
      let propname;
      let content;
      if(Array.isArray(value)){
        propname = value[0];
        content = value[1] || {};
      }else{
        propname = 'property';
        content = {content:value};
      }
      yield {
        [propname]: prefix.join(':'),
        ...content,
      }
    }
    else if(typeof value === "string" || typeof value === "number" || Array.isArray(value)){
      let propname;
      let content;
      if(Array.isArray(value)){
        propname = value[0];
        content = value[1] || {};
      }else{
        propname = 'property';
        content = {content:value};
      }
      yield {
        [propname]:  prefix.concat(key).join(':'),
        ...content,
      }
    }
    else {
      yield * run(value,  prefix.concat(key));
    }
  }
};

---
{[...run(meta), ].map(value => {
    return (
      <meta {...value} />)
})}


